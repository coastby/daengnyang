plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    // Asciidoctor 플러그인 적용
    // gradle 7.0 이상부터는 jvm 사용
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'jacoco'
}

group = 'com.daengnyangffojjak'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions // dependencies 에서 적용한 것 추가
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.14.1'
    // LocalDateTime 직렬화 or 역직렬화를 위해 종속성 추가
    compileOnly 'org.projectlombok:lombok:1.18.24'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.0.1'
    implementation 'org.springframework.security:spring-security-test:6.0.1'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: '3.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 타임리프 추가
    // https://mvnrepository.com/artifact/org.webjars.bower/jquery
    implementation group: 'org.webjars.bower', name: 'jquery', version: '3.6.2' // jquery 추가
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1' // json 추가

    implementation 'org.springframework.boot:spring-boot-starter-data-redis' // redis 의존성 추가

    implementation "org.springframework.boot:spring-boot-starter-actuator" // health check

    implementation 'com.google.firebase:firebase-admin:9.1.1' // fcm 의존성 추가

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompileOnly 'org.projectlombok:lombok:1.18.24' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24' // 테스트 의존성 추가
    testImplementation 'com.h2database:h2'
}

//JaCoCo-----------------------
jacoco {
    toolVersion = '0.8.8'
}

// 코드 커버리지 진행 후 결과를 리포트로 저장
jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true

        // html 파일 위치 지정
        html.destination file('build/reports/myReport.html')
    }

    // 리포트 작성 시 특정 파일 제외
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*DailyDaengnyangApplication*',
                            '**/*Config*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/*BaseEntity*',
                            '**/*Handler*',
                            '**/*EntryPoint*',
                            '**/*TokenInfo*',
                            '**/*Filter*',
                            '**/*Exception*',
                            '**/*Error*',
                            '**/*UiController*'
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true // 활성화
            element = 'CLASS' // 클래스 단위로 커버리지 체크
            // includes = []
            // 빌드를 위해 주석처리
            // 라인 커버리지 제한을 80%로 설정
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.20
//            }
//
//            // 브랜치 커버리지 제한을 80%로 설정
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.20
//            }
//
//            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 200
//            }

            excludes = [
                    '**.*DailyDaengnyangApplication*',
                    '**.*Config*',
                    '**.*Request*',
                    '**.*Response*',
                    '**.*BaseEntity*',
                    '**.*Handler*',
                    '**.*EntryPoint*',
                    '**.*TokenInfo*',
                    '**.*Filter*',
                    '**.*Exception*',
                    '**.*UiController*',
                    '**.*Error*']
        }
    }
}


//REST docs---------------------
tasks.named('test') {
    useJUnitPlatform()
}


ext {
    // 아래서 사용할 변수 선언
    snippetsDir = file('build/generated-snippets')
}


test {
    // 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

