spring:
  #redis
  data:
    redis:
      host: localhost
      port: 6379
  #jpa
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true  #sql format 적용
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: localhost
    username: root
    password: 1q2w3e4r
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 249427056948-q7tgs120vj8pk41ktek45eps9gcia60a.apps.googleusercontent.com
            client-secret: 비밀키
            scope: profile,email
          # 네이버는 spring security가 기본적을 제공해주지 않기 때문에 github, google과 달리 많은 정보를 적어줘야한다.
          naver:
            client-id: x_ONoZxlBQNlvg2Q4l_i
            client-secret: 비밀키
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            authorization_grant_type: authorization_code
            scope: name,email
            client-name: Naver
        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 30MB
#FCM
fcm:
  key:
    path: daengnyang-e1df7-firebase-adminsdk-4onpr-c2106835f5.json

#Encoding
server:
  servlet:
    encoding:
      force-response: true
jwt:
  token:
    secret: temp
#Log
logging:
  level:
    com.daengnyangffojjak.dailydaengnyang: debug

cloud:
  aws:
    credentials:
      accessKey: ${AWS_ACCESS_KEY_ID}
      secretKey: ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: daengnyang-bucket # 버킷 이름
    region:
      static: ap-northeast-2
    stack:
      auto: false


---

spring:
  profiles:
    group:
      development:
        - common
        - development_database
        - port_8080
      production-set1:
        - common
        - production_database
        - port_9001
      production-set2:
        - common
        - production_database
        - port_9002

---

spring:
  config:
    activate:
      on-profile: common

---

spring:
  config:
    activate:
      on-profile: development_database

---

spring:
  config:
    activate:
      on-profile: production_database

---

spring:
  config:
    activate:
      on-profile: port_8080

server:
  port: 8080

---

spring:
  config:
    activate:
      on-profile: port_9001

server:
  port: 9001

---

spring:
  config:
    activate:
      on-profile: port_9002

server:
  port: 9002

#redirect Uri
app:
  oauth2:
    authorizedRedirectUri: "http://localhost:3000/oauth2/redirect"
